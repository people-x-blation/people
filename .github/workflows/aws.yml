
on:
  push:
    branches:
      - master
      - release*
  pull_request:
    branches: 
      - master
      - release

name: Deploy to Amazon ECS

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v1

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-northeast-2

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: people
        IMAGE_TAG: ${{ github.sha }}
        DB_HOST: ${{SECRETS.DB_HOST}}
        DB_USER: ${{SECRETS.DB_USER}}
        DB_PW: ${{SECRETS.DB_PW}}
        PORT: ${{SECRETS.PORT}}
        DB_PORT: ${{SECRETS.DB_PORT}}
        DATABASE: ${{SECRETS.DATABASE}}
        KAKAO_CLIENT_ID: ${{SECRETS.KAKAO_CLIENT_ID}}
        KAKAO_CLIENT_SECRET: ${{SECRETS.KAKAO_CLIENT_SECRET}}
        ACCESS_KEY: ${{SECRETS.ACCESS_KEY}}
        SECRET_ACCESS_KEY: ${{SECRETS.ACCESS_KEY}}
        REGION: ${{SECRETS.REGION}}
        KAKAO_CALLBACK_URL: ${{SECRETS.KAKAO_CALLBACK_URL}}
        SLACK_BOT_ERROR_URL: ${{SECRETS.SLACK_BOT_ERROR_URL}}
        SLACK_BOT_UPLOAD: ${{SECRETS.SLACK_BOT_UPLOAD}}
        CRYPTO_SECRETKEY: ${{SECRETS.CRYPTO_SECRETKEY}}

      run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS.
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: task-definition.json
        container-name: people
        image: ${{ steps.build-image.outputs.image }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: people_release
        cluster: people-1
        wait-for-service-stability: true
